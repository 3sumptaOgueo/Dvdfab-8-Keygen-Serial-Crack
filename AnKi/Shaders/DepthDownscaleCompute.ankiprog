// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// The 1st reduction is average depth. The next reductions are max depth

#pragma anki mutator WAVE_OPERATIONS 0 1

#pragma anki start comp
#include <AnKi/Shaders/Common.hlsl>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>

[[vk::push_constant]] ConstantBuffer<DepthDownscaleUniforms> g_uniforms;

[[vk::binding(0)]] RWTexture2D<Vec4> g_dstUavs[12u];
[[vk::binding(1)]] globallycoherent RWTexture2D<Vec4> g_dstUav5;
[[vk::binding(2)]] globallycoherent RWStructuredBuffer<U32> g_spdCounter;
[[vk::binding(3)]] RWStructuredBuffer<F32> g_clientBuff;

[[vk::binding(4)]] SamplerState u_linearAnyClampSampler;
[[vk::binding(5)]] Texture2D g_srcTex;

// Include SPD
#define A_GPU 1
#define A_HLSL 1
#include <ThirdParty/FidelityFX/ffx_a.h>

groupshared AU1 s_spdCounter;
groupshared AF1 s_spdIntermediateR[16][16];

AF4 SpdLoadSourceImage(AU2 p, AU1 slice)
{
	ANKI_MAYBE_UNUSED(slice);
	const AF2 textureCoord = Vec2(p) * g_uniforms.m_srcTexSizeOverOne + g_uniforms.m_srcTexSizeOverOne;
	return AF4(g_srcTex.SampleLevel(u_linearAnyClampSampler, textureCoord, 0.0).r, 0.0, 0.0, 0.0);
}

AF4 SpdLoad(AU2 p, AU1 slice)
{
	ANKI_MAYBE_UNUSED(slice);
	return AF4(g_dstUav5[UVec2(p)].r, 0.0, 0.0, 0.0);
}

void SpdStore(AU2 p, AF4 value, AU1 mip, AU1 slice)
{
	ANKI_MAYBE_UNUSED(slice);

	if(mip == 5u)
	{
		g_dstUav5[UVec2(p)] = Vec4(value.x, 0.0, 0.0, 0.0);
	}
	else
	{
		g_dstUavs[mip][UVec2(p)] = Vec4(value.x, 0.0, 0.0, 0.0);
	}

	// Store the last mip to the buffer as well
	if(mip == g_uniforms.m_mipmapCount - 1u)
	{
		const U32 idx = p.y * g_uniforms.m_lastMipWidth + p.x;
		g_clientBuff[idx] = value.x;
	}
}

void SpdIncreaseAtomicCounter(AU1 slice)
{
	ANKI_MAYBE_UNUSED(slice);
	InterlockedAdd(g_spdCounter[0], 1u, s_spdCounter);
}

AU1 SpdGetAtomicCounter()
{
	return s_spdCounter;
}

void SpdResetAtomicCounter(AU1 slice)
{
	ANKI_MAYBE_UNUSED(slice);
	g_spdCounter[0] = 0u;
}

AF4 SpdLoadIntermediate(AU1 x, AU1 y)
{
	return AF4(s_spdIntermediateR[x][y], 0.0, 0.0, 0.0);
}

void SpdStoreIntermediate(AU1 x, AU1 y, AF4 value)
{
	s_spdIntermediateR[x][y] = value.x;
}

AF4 SpdReduce4(AF4 v0, AF4 v1, AF4 v2, AF4 v3)
{
	const F32 maxDepth = max(v0.x, max(v1.x, max(v2.x, v3.x)));
	return AF4(maxDepth, 0.0, 0.0, 0.0);
}

#define SPD_LINEAR_SAMPLER 1

#if WAVE_OPERATIONS == 0
#	define SPD_NO_WAVE_OPERATIONS 1
#endif

#include <ThirdParty/FidelityFX/ffx_spd.h>

[numthreads(256, 1, 1)] void main(UVec3 svGroupId : SV_GROUPID, U32 svGroupIndex : SV_GROUPINDEX)
{
	const U32 slice = 0u;
	const UVec2 offset = UVec2(0, 0);
	SpdDownsample(AU2(svGroupId.xy), AU1(svGroupIndex), AU1(g_uniforms.m_mipmapCount), AU1(g_uniforms.m_workgroupCount), slice, offset);
}

#pragma anki end
