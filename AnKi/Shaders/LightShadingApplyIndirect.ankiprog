// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/BilateralFilter.hlsl>
#include <AnKi/Shaders/PackFunctions.hlsl>

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(2)]] Texture2D<RVec4> g_quarterDiffuseIndirectTex;
[[vk::binding(3)]] Texture2D<RVec4> g_quarterSpecularIndirectTex;
[[vk::binding(4)]] Texture2D g_quarterDepthTex;
[[vk::binding(5)]] Texture2D g_fullDepthTex;
[[vk::binding(6)]] Texture2D<RVec4> g_gbuffer0Tex;
[[vk::binding(7)]] Texture2D<RVec4> g_gbuffer1Tex;
[[vk::binding(8)]] Texture2D<RVec4> g_gbuffer2Tex;
[[vk::binding(9)]] Texture2D<RVec4> g_integrationLut;

#define CLUSTERED_SHADING_SET 0u
#define CLUSTERED_SHADING_UNIFORMS_BINDING 10u
#include <AnKi/Shaders/ClusteredShadingCommon.hlsl>

struct Uniforms
{
	F32 m_near;
	F32 m_far;
	F32 m_padding0;
	F32 m_padding1;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_uniforms;

RVec3 main([[vk::location(0)]] Vec2 uv : TEXCOORD) : SV_TARGET0
{
	// GBuffer
	GbufferInfo gbuffer = (GbufferInfo)0;
	unpackGBufferNoVelocity(g_gbuffer0Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer1Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer2Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0), gbuffer);

	// Reference
	const F32 depthCenter = g_fullDepthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).x;
	if(depthCenter == 1.0)
	{
		discard;
	}

	const F32 linearDepthCenter = linearizeDepth(depthCenter, g_uniforms.m_near, g_uniforms.m_far);

	// Quad depths
	Vec4 quarterDepths = g_quarterDepthTex.GatherRed(g_nearestAnyClampSampler, uv);
	quarterDepths = linearizeDepth(quarterDepths, g_uniforms.m_near, g_uniforms.m_far);

	// Diff
	const Vec4 diffs = abs(quarterDepths - linearDepthCenter);
	const F32 maxDiff = max(diffs.x, max(diffs.y, max(diffs.z, diffs.w)));

	const F32 depthThreshold = 0.2 / (g_uniforms.m_far - g_uniforms.m_near);

	// Do a neareset depth upscale
	RVec3 diffuse = RVec3(0.0, 0.0, 0.0);
	RVec3 specular = RVec3(0.0, 0.0, 0.0);
	if(maxDiff <= depthThreshold)
	{
		diffuse = g_quarterDiffuseIndirectTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).xyz;
		specular = g_quarterSpecularIndirectTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).xyz;
	}
	else
	{
		// Some discontinuites, need to pick the one closest to depth reference

		const RVec4 diffuseR = g_quarterDiffuseIndirectTex.GatherRed(g_linearAnyClampSampler, uv);
		const RVec4 diffuseG = g_quarterDiffuseIndirectTex.GatherGreen(g_linearAnyClampSampler, uv);
		const RVec4 diffuseB = g_quarterDiffuseIndirectTex.GatherBlue(g_linearAnyClampSampler, uv);

		const RVec4 specularR = g_quarterSpecularIndirectTex.GatherRed(g_linearAnyClampSampler, uv);
		const RVec4 specularG = g_quarterSpecularIndirectTex.GatherGreen(g_linearAnyClampSampler, uv);
		const RVec4 specularB = g_quarterSpecularIndirectTex.GatherBlue(g_linearAnyClampSampler, uv);

		F32 minDiff = diffs.x;
		U32 comp = 0u;

		if(diffs.y < minDiff)
		{
			comp = 1u;
			minDiff = diffs.y;
		}

		if(diffs.z < minDiff)
		{
			comp = 2u;
			minDiff = diffs.z;
		}

		diffuse = Vec3(diffuseR[comp], diffuseG[comp], diffuseB[comp]);
		specular = Vec3(specularR[comp], specularG[comp], specularB[comp]);
	}

	// Do diffuse
	diffuse *= gbuffer.m_diffuse;

	// Do specular
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_clusteredShading.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depthCenter, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;
	const RVec3 viewDir = normalize(g_clusteredShading.m_cameraPosition - worldPos);
	const F32 NoV = max(0.0, dot(gbuffer.m_normal, viewDir));
	const Vec3 env = specularDFG(gbuffer.m_f0, gbuffer.m_roughness, g_integrationLut, g_linearAnyClampSampler, NoV);
	specular *= env;

	// Writeout
	return min(diffuse + specular, RVec3(kMaxRF32, kMaxRF32, kMaxRF32));
}
#pragma anki end
