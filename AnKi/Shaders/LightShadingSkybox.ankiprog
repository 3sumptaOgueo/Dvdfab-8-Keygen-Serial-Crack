// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator METHOD 0 1 2 // 0: solid colod, 1: 2D image, 2: generated

#pragma anki technique_start vert

#include <AnKi/Shaders/Common.hlsl>

struct VertOut
{
	Vec4 m_position : SV_POSITION;
	[[vk::location(0)]] Vec2 m_uv : TEXCOORD;
};

VertOut main(U32 vertId : SV_VERTEXID)
{
	VertOut output;
	output.m_uv = Vec2(vertId & 1, vertId >> 1) * 2.0;

	output.m_position = Vec4(output.m_uv * 2.0 - 1.0, 1.0, 1.0);

	return output;
}

#pragma anki technique_end vert

#pragma anki technique_start frag

#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/TonemappingFunctions.hlsl>
#include <AnKi/Shaders/Sky.hlsl>

#if METHOD == 0
struct Uniforms
{
	RVec3 m_solidColor;
	F32 m_padding;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_unis;
#elif METHOD == 1
[[vk::binding(0)]] SamplerState g_trilinearAnySampler;
[[vk::binding(1)]] Texture2D<RVec4> g_envMapTex;

struct Uniforms
{
	Mat4 m_invertedViewProjectionJitterMat;

	Vec3 m_cameraPos;
	F32 m_padding;

	Vec3 m_scale;
	F32 m_padding1;

	Vec3 m_bias;
	F32 m_padding2;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_unis;
#else
[[vk::binding(0)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(1)]] Texture2D<Vec4> g_skyLut;
[[vk::binding(2)]] ConstantBuffer<GlobalRendererUniforms> g_unis;
#endif

RVec3 main([[vk::location(0)]] Vec2 uv : TEXCOORD) : SV_TARGET0
{
#if METHOD == 0
	ANKI_MAYBE_UNUSED(uv);
	return g_unis.m_solidColor;
#elif METHOD == 1
	const F32 depth = 1.0;
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_unis.m_invertedViewProjectionJitterMat, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 eyeToFrag = normalize(worldPos - g_unis.m_cameraPos);

	const Vec2 uv3 = equirectangularMapping(eyeToFrag);

	// When uv is close to the edge of the texture the other quads might be in the oposit coordinate. Then the
	// derivatives will be huge causing the texture to use the highest mip and thus create a visible seam. To fix this
	// find when the derivatives are large and do some manual work to fix it
	const Vec2 dx = abs(ddx_coarse(uv3));
	const F32 maxD = max(dx.x, dx.y);

	const F32 bias = (maxD > 0.9) ? -100.0f : 0.0f;

	return g_envMapTex.SampleBias(g_trilinearAnySampler, uv3, bias).rgb * g_unis.m_scale + g_unis.m_bias;
#else
	const F32 depth = 1.0;
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_unis.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 eyeToFrag = normalize(worldPos - g_unis.m_cameraPosition);

	return computeSkyColor(g_skyLut, g_linearAnyClampSampler, eyeToFrag, -g_unis.m_directionalLight.m_direction, g_unis.m_directionalLight.m_power,
						   true);
#endif
}

#pragma anki technique_end frag
