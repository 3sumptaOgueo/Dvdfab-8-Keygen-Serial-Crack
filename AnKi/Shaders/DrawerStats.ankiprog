// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// Used in stat collection in the RenderableDrawer.
// It's simple drawcall that draws a very small quad to the screen. Only one thread of the fragment shader will read the multi-draw counts and write
// the number of drawcalls in a buffer.

#pragma anki mutator COLOR_ATTACHMENT_COUNT 0 1 4

#include <AnKi/Shaders/Common.hlsl>

constexpr U32 kQuadSizeXY = 4;
constexpr U32 kThreadCount = kQuadSizeXY * kQuadSizeXY;

struct Constants
{
	UVec4 m_viewport;
};

[[vk::push_constant]] ConstantBuffer<Constants> g_consts;

#pragma anki technique_start vert

struct VertOut
{
	Vec4 m_position : SV_POSITION;
};

VertOut main(U32 vertId : SV_VERTEXID)
{
	Vec2 uv = Vec2(vertId & 1u, ((vertId + 1u) / 3u) & 1u);

	uv *= 1.0f / Vec2(g_consts.m_viewport.zw) * F32(kQuadSizeXY);

	VertOut output;
	output.m_position = Vec4(uv * 2.0 - 1.0, 0.0, 1.0);

	return output;
}
#pragma anki technique_end vert

#pragma anki technique_start frag

[[vk::binding(0)]] StructuredBuffer<U32> g_mdiDrawCounts;
[[vk::binding(1)]] StructuredBuffer<DrawIndexedIndirectArgs> g_drawArguments;
[[vk::binding(2)]] StructuredBuffer<U32> g_bucketFirstDrawArgIndex;

[[vk::binding(3)]] RWStructuredBuffer<U32> g_stats;
[[vk::binding(4)]] RWStructuredBuffer<U32> g_threadExecuted;

#if COLOR_ATTACHMENT_COUNT > 0
struct FragOut
{
	Vec4 m_color0 : SV_TARGET0;
#	if COLOR_ATTACHMENT_COUNT == 4
	Vec4 m_color1 : SV_TARGET1;
	Vec4 m_color2 : SV_TARGET2;
	Vec2 m_color3 : SV_TARGET3;
#	endif
};
#endif

#if COLOR_ATTACHMENT_COUNT > 0
FragOut
#else
void
#endif
main(Vec4 svPosition : SV_POSITION)
{
	const UVec2 pos = UVec2(svPosition.xy - Vec2(g_consts.m_viewport.xy));
	const U32 threadIdx = pos.y * kQuadSizeXY + pos.x;

	U32 threadsExecuted;
	InterlockedAdd(g_threadExecuted[0], 1, threadsExecuted);
	++threadsExecuted;

	const Bool firstPass = threadsExecuted <= kThreadCount;

	U32 bucketCount, unused;
	g_mdiDrawCounts.GetDimensions(bucketCount, unused);

	// Calc visible count
	U32 visiblesCount = 0u;
	U32 itemsPerThread = (bucketCount + (kThreadCount - 1)) / kThreadCount;
	for(U32 bucket = threadIdx * itemsPerThread; bucket < min(bucketCount, (threadIdx + 1u) * itemsPerThread); ++bucket)
	{
		visiblesCount += g_mdiDrawCounts[bucket];
	}

	// Calc primitive count
	U32 primitiveCount = 0u;
	for(U32 bucket = 0; bucket < bucketCount; ++bucket)
	{
		const U32 drawCount = g_mdiDrawCounts[bucket];
		itemsPerThread = (drawCount + (kThreadCount - 1)) / kThreadCount;

		for(U32 draw = threadIdx * itemsPerThread; draw < min(drawCount, (threadIdx + 1u) * itemsPerThread); ++draw)
		{
			primitiveCount += g_drawArguments[g_bucketFirstDrawArgIndex[bucket] + draw].m_indexCount;
		}
	}

	if(firstPass)
	{
		U32 origValue;
		InterlockedExchange(g_stats[threadIdx], visiblesCount, origValue);
		InterlockedExchange(g_stats[threadIdx + kThreadCount], primitiveCount, origValue);
	}
	else
	{
		InterlockedAdd(g_stats[threadIdx], visiblesCount);
		InterlockedAdd(g_stats[threadIdx + kThreadCount], primitiveCount);
	}

	discard;

#if COLOR_ATTACHMENT_COUNT > 0
	return (FragOut)0;
#endif
}
#pragma anki technique_end frag
