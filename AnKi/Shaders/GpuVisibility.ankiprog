// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/CollisionFunctions.hlsl>

// Buffers that point to the GPU scene
[[vk::binding(0)]] StructuredBuffer<GpuSceneRenderableAabb> g_aabbs;
[[vk::binding(1)]] StructuredBuffer<GpuSceneRenderable> g_renderables;
[[vk::binding(2)]] ByteAddressBuffer g_gpuScene;

[[vk::binding(3)]] Texture2D<U32> g_hiZTex;

// These 2 have the same size
[[vk::binding(4)]] RWStructuredBuffer<GpuSceneRenderable> g_instanceRateRenderables;
[[vk::binding(5)]] RWStructuredBuffer<DrawIndexedIndirectArgs> g_drawIndexedIndirectArgs;

// Index pointing to the above arrays. One for each render state bucket
[[vk::binding(6)]] StructuredBuffer<U32> g_drawIndirectArgsOffsets;
// The MDI counts. One for each render state bucket
[[vk::binding(7)]] RWStructuredBuffer<U32> g_mdiDrawCounts;

struct Uniforms
{
	Vec4 m_clipPlanes[6u];

	UVec3 m_padding;
	U32 m_aabbCount;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_unis;

[numthreads(64, 1, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	const U32 aabbIdx = svDispatchThreadId.x;
	if(aabbIdx >= g_unis.m_aabbCount)
	{
		return;
	}

	const GpuSceneRenderableAabb aabb = g_aabbs[aabbIdx];

	// Frustum test
	//
	F32 minPlaneDistance = 0.0f;
	[unroll] for(U32 i = 0; i < 6; ++i)
	{
		const F32 d = testPlanePoint(g_unis.m_clipPlanes[i].xyz, g_unis.m_clipPlanes[i].w, aabb.m_sphereCenter);
		minPlaneDistance = min(minPlaneDistance, d);
	}

	if(minPlaneDistance <= aabb.m_negativeSphereRadius)
	{
		return;
	}

	// TODO HiZ testing

	// TODO LOD selection
	const U32 lod = 0;

	// Add the drawcall
	//
	const U32 renderStateBucket = aabb.m_renderableIndexAndRenderStateBucket & ((1u << 12u) - 1u);
	const U32 renderableIdx = aabb.m_renderableIndexAndRenderStateBucket >> 12u;

	U32 indirectIdx;
	InterlockedAdd(g_mdiDrawCounts[renderStateBucket], 1, indirectIdx);
	indirectIdx += g_drawIndirectArgsOffsets[renderStateBucket];

	const GpuSceneRenderable renderableIn = g_renderables[renderableIdx];
	const GpuSceneMeshLod meshLod = g_gpuScene.Load<GpuSceneMeshLod>(renderableIn.m_geometryOffset + sizeof(GpuSceneMeshLod) * lod);

	DrawIndexedIndirectArgs indirect;
	indirect.m_indexCount = meshLod.m_indexCount;
	indirect.m_instanceCount = 1;
	indirect.m_firstIndex = meshLod.m_firstIndex;
	indirect.m_vertexOffset = 0;
	indirect.m_firstInstance = indirectIdx;
	g_drawIndexedIndirectArgs[indirectIdx] = indirect;

	GpuSceneRenderable renderableOut = renderableIn;
	renderableOut.m_geometryOffset += sizeof(GpuSceneMeshLod) * lod;
	g_instanceRateRenderables[indirectIdx] = renderableOut;
}

#pragma anki end
