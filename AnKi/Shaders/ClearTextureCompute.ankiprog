// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// A slow compute program to clear an image with a contant color

#pragma anki mutator TEXTURE_DIMENSIONS 2 3
#pragma anki mutator COMPONENT_TYPE 0 1 // 0 is float, 1 is uint

#pragma anki technique_start comp
#include <AnKi/Shaders/Common.hlsl>

struct Uniforms
{
#if COMPONENT_TYPE == 0
	Vec4 m_clearColor;
#else
	UVec4 m_clearColor;
#endif
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_unis;

#if TEXTURE_DIMENSIONS == 2
#	if COMPONENT_TYPE == 0
[[vk::binding(0)]] RWTexture2D<Vec4> g_storageTex;
#	else
[[vk::binding(0)]] RWTexture2D<UVec4> g_storageTex;
#	endif
#else
#	if COMPONENT_TYPE == 0
[[vk::binding(0)]] RWTexture3D<Vec4> g_storageTex;
#	else
[[vk::binding(0)]] RWTexture3D<UVec4> g_storageTex;
#	endif
#endif

[numthreads(8, 8, (TEXTURE_DIMENSIONS == 2) ? 1 : 8)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
#if TEXTURE_DIMENSIONS == 2
	UVec2 texSize;
	g_storageTex.GetDimensions(texSize.x, texSize.y);

	if(svDispatchThreadId.x >= texSize.x || svDispatchThreadId.y >= texSize.y)
	{
		return;
	}

	g_storageTex[svDispatchThreadId.xy] = g_unis.m_clearColor;
#else
	UVec3 texSize;
	g_storageTex.GetDimensions(texSize.x, texSize.y, texSize.z);

	if(svDispatchThreadId.x >= texSize.x || svDispatchThreadId.y >= texSize.y || svDispatchThreadId.z >= texSize.z)
	{
		return;
	}

	g_storageTex[svDispatchThreadId] = g_unis.m_clearColor;
#endif
}

#pragma anki technique_end comp
