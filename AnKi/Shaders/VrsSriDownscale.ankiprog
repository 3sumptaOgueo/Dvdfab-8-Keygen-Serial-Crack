// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique_start comp

#include <AnKi/Shaders/Functions.hlsl>

Texture2D<UVec4> g_inputTex : register(t0);
SamplerState g_nearestAnyClampSampler : register(s0);
RWTexture2D<UVec4> g_storageTex : register(u0);

struct Uniforms
{
	Vec2 m_oneOverViewportSize;
	F32 m_padding0;
	F32 m_padding1;
};
ANKI_PUSH_CONSTANTS(Uniforms, g_unis)

[numthreads(8, 8, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	const Vec2 uv = (Vec2(svDispatchThreadId.xy) + 0.5) * g_unis.m_oneOverViewportSize;

	const UVec4 rates = g_inputTex.GatherRed(g_nearestAnyClampSampler, uv);

	UVec2 rate = decodeVrsRate(rates[0]);
	rate = min(rate, decodeVrsRate(rates[1]));
	rate = min(rate, decodeVrsRate(rates[2]));
	rate = min(rate, decodeVrsRate(rates[3]));

	g_storageTex[svDispatchThreadId.xy] = UVec4(encodeVrsRate(rate), 0, 0, 0);
}

#pragma anki technique_end comp
