// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator FILM_GRAIN 0 1
#pragma anki mutator BLOOM_ENABLED 0 1
#pragma anki mutator DBG_ENABLED 0 1

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki end vert

#pragma anki start frag
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/MotionBlur.hlsl>

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(2)]] SamplerState g_trilinearRepeatSampler;
[[vk::binding(3)]] Texture2D<RVec4> g_lightShadingRt;
[[vk::binding(4)]] Texture2D<RVec4> g_ppsBloomLfRt;
[[vk::binding(5)]] Texture3D<RVec4> g_lut;
[[vk::binding(6)]] Texture2D g_motionVectorsRt;
[[vk::binding(7)]] Texture2D g_depthRt;
#if DBG_ENABLED
[[vk::binding(8)]] Texture2D<RVec4> g_dbgOutlineRt;
#endif

struct PushConstants
{
	U32 m_motionBlurSamples;
	F32 m_filmGrainStrength;
	U32 m_frameCount;
	U32 m_padding;
};

[[vk::push_constant]] ConstantBuffer<PushConstants> g_pc;

RVec3 colorGrading(RVec3 color)
{
	Vec3 lutSize;
	g_lut.GetDimensions(lutSize.x, lutSize.y, lutSize.y);

	const RVec3 lutScale = ((lutSize.x - 1.0) / lutSize.x).xxx;
	const RVec3 lutOffset = (1.0 / (2.0 * lutSize.x)).xxx;

	color = min(color, RVec3(1.0, 1.0, 1.0));
	const RVec3 lutCoords = color * lutScale + lutOffset;
	return g_lut.SampleLevel(g_trilinearRepeatSampler, lutCoords, 0.0).rgb;
}

RVec3 main([[vk::location(0)]] Vec2 uv : TEXCOORD) : SV_TARGET0
{
	RVec3 outColor;

	if(g_pc.m_motionBlurSamples > 0u)
	{
		outColor = motionBlur(g_motionVectorsRt, g_nearestAnyClampSampler, g_lightShadingRt, g_linearAnyClampSampler, uv, g_pc.m_motionBlurSamples);
	}
	else
	{
		outColor = g_lightShadingRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).rgb;
	}

#if BLOOM_ENABLED
	const RVec3 bloom = g_ppsBloomLfRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).rgb;
	outColor += bloom;
#endif

	outColor = colorGrading(outColor);

#if FILM_GRAIN
	const F32 dt = 1.0;
	outColor = filmGrain(outColor, uv, g_pc.m_filmGrainStrength, F32(g_pc.m_frameCount % 0xFFFFu) * dt);
#endif

#if DBG_ENABLED
	const RVec4 dbg = g_dbgOutlineRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0);
	outColor = lerp(outColor, dbg.rgb, dbg.a);
#endif

	return outColor;
}

#pragma anki end frag
