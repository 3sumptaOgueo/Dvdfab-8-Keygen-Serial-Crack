// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique_start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki technique_end vert

#pragma anki technique_start frag
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>

[[vk::binding(0)]] ConstantBuffer<ClusteredShadingConstants> g_clusteredShading;
[[vk::binding(1)]] StructuredBuffer<PointLight> g_pointLights;
[[vk::binding(1)]] StructuredBuffer<SpotLight> g_spotLights;
[[vk::binding(2)]] Texture2D<Vec4> g_shadowAtlasTex;
[[vk::binding(3)]] StructuredBuffer<Cluster> g_clusters;

[[vk::binding(4)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(5)]] SamplerState g_trilinearClampSampler;

[[vk::binding(6)]] Texture2D<Vec4> g_gbuffer0Tex;
[[vk::binding(7)]] Texture2D<Vec4> g_gbuffer1Tex;
[[vk::binding(8)]] Texture2D<Vec4> g_gbuffer2Tex;
[[vk::binding(9)]] Texture2D g_depthTex;
[[vk::binding(10)]] Texture2D<RVec4> g_resolvedShadowsTex;

// Common code for lighting
#define LIGHTING_COMMON_BRDF() \
	const RVec3 frag2Light = light.m_position - worldPos; \
	const RVec3 l = normalize(frag2Light); \
	const RVec3 specC = specularIsotropicLobe(gbuffer, viewDir, l); \
	const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse); \
	const RF32 att = computeAttenuationFactor(light.m_radius, frag2Light); \
	RF32 lambert = max(0.0, dot(gbuffer.m_normal, l));

RVec3 main(Vec4 svPosition : SV_POSITION, Vec2 uv : TEXCOORD) : SV_TARGET0
{
	const F32 depth = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Vec2 ndc = uvToNdc(uv);

	if(depth == 1.0)
	{
		return RVec3(0.0, 0.0, 0.0);
	}

	// Get world position
	const Vec4 worldPos4 = mul(g_clusteredShading.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Get the cluster
	Cluster cluster = getClusterFragCoord(g_clusters, g_clusteredShading, Vec3(svPosition.xy, depth));

	// return clusterHeatmap(cluster, 1u << (U32)GpuSceneNonRenderableObjectType::kLight, 3);

	// Decode GBuffer
	GbufferInfo gbuffer = (GbufferInfo)0;
	unpackGBufferNoVelocity(g_gbuffer0Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer1Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0),
							g_gbuffer2Tex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0), gbuffer);
	gbuffer.m_subsurface = max(gbuffer.m_subsurface, kSubsurfaceMin);

	// SM
	RVec4 resolvedSm = g_resolvedShadowsTex.SampleLevel(g_trilinearClampSampler, uv, 0.0);
	U32 resolvedSmIdx = 0u;

	// Ambient and emissive color
	RVec3 outColor = gbuffer.m_emission;

	// Dir light
	const RVec3 viewDir = normalize(g_clusteredShading.m_cameraPosition - worldPos);
	const DirectionalLight dirLight = g_clusteredShading.m_directionalLight;
	if(dirLight.m_active != 0u)
	{
		RF32 shadowFactor;
		if(dirLight.m_shadowCascadeCount > 0u)
		{
			shadowFactor = resolvedSm[0];
			++resolvedSmIdx;
		}
		else
		{
			shadowFactor = 1.0;
		}

		const RVec3 l = -dirLight.m_direction;

		const RF32 lambert = max(gbuffer.m_subsurface, dot(l, gbuffer.m_normal));

		const RVec3 diffC = diffuseLobe(gbuffer.m_diffuse);
		const RVec3 specC = specularIsotropicLobe(gbuffer, viewDir, l);

		outColor += (diffC + specC) * dirLight.m_diffuseColor * (shadowFactor * lambert);
	}

	// Point lights
	U32 idx;
	[loop] while((idx = iteratePointLights(cluster)) != kMaxU32)
	{
		const PointLight light = g_pointLights[idx];

		LIGHTING_COMMON_BRDF();

		[branch] if(light.m_shadowAtlasTileScale >= 0.0)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * max(gbuffer.m_subsurface, lambert));
	}

	// Spot lights
	[loop] while((idx = iterateSpotLights(cluster)) != kMaxU32)
	{
		const SpotLight light = g_spotLights[idx];

		LIGHTING_COMMON_BRDF();

		const F32 spot = computeSpotFactor(l, light.m_outerCos, light.m_innerCos, light.m_direction);

		[branch] if(light.m_shadow)
		{
			const RF32 shadow = resolvedSm[resolvedSmIdx++];
			lambert *= shadow;
		}

		outColor += (diffC + specC) * light.m_diffuseColor * (att * spot * max(gbuffer.m_subsurface, lambert));
	}

	outColor = min(outColor, RVec3(kMaxRF32, kMaxRF32, kMaxRF32));
	return outColor;
}
#pragma anki technique_end frag
