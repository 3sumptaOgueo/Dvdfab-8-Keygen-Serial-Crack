// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/TonemappingFunctions.hlsl>

#define LOG_AVG 0

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kInputTexSize, 0u);

#define THREAD_COUNT_X 32u
#define THREAD_COUNT_Y 16u
#define THREAD_COUNT UVec2(THREAD_COUNT_X, THREAD_COUNT_Y)

// Align the tex size to workgroup size
constexpr UVec2 kAlignedInputTexSize = THREAD_COUNT * ((kInputTexSize + THREAD_COUNT - 1u) / THREAD_COUNT);
constexpr UVec2 kPixelsPerTile = kAlignedInputTexSize / THREAD_COUNT;

[[vk::binding(0)]] Texture2D<RVec4> g_tex;

#define TONEMAPPING_RESOURCE_AS_WRITE_IMAGE 1
constexpr U32 kTonemappingBinding = 1u;
#include <AnKi/Shaders/TonemappingResources.hlsl>

groupshared F32 s_avgLum[THREAD_COUNT_X * THREAD_COUNT_Y];

[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)] void main(UVec3 svGroupThreadId : SV_GROUPTHREADID, U32 svGroupIndex : SV_GROUPINDEX)
{
	// Gather the log-average luminance of a tile. It will miss some pixels but not too many
	const U32 yStart = svGroupThreadId.y * kPixelsPerTile.y;
	const U32 xStart = svGroupThreadId.x * kPixelsPerTile.x;

	F32 avgLum = 0.0;
	[unroll] for(U32 y = 0u; y < kPixelsPerTile.y; ++y)
	{
		[unroll] for(U32 x = 0u; x < kPixelsPerTile.x; ++x)
		{
			const UVec2 uv = UVec2(xStart, yStart) + UVec2(x, y);
			if(uv.x >= kInputTexSize.x || uv.y >= kInputTexSize.y)
			{
				continue;
			}

			const Vec3 color = g_tex.Load(IVec3(uv, 0)).rgb;
			const F32 lum = computeLuminance(color);
#if LOG_AVG
			avgLum += log(max(kEpsilonf, lum));
#else
			avgLum += lum;
#endif
		}
	}

	s_avgLum[svGroupIndex] = avgLum;

	GroupMemoryBarrierWithGroupSync();

	// Gather the results into one
	[loop] for(U32 s = (THREAD_COUNT_X * THREAD_COUNT_Y) / 2u; s > 0u; s >>= 1u)
	{
		if(svGroupIndex < s)
		{
			s_avgLum[svGroupIndex] += s_avgLum[svGroupIndex + s];
		}

#if ANKI_PLATFORM_MOBILE
		if(s > 16u)
		{
			GroupMemoryBarrierWithGroupSync();
		}
#endif
	}

	// Write the result
	[branch] if(svGroupIndex == 0u)
	{
#if LOG_AVG
		const F32 crntLum = exp(s_avgLum[0] * (1.0 / F32(kInputTexSize.x * kInputTexSize.y)));
#else
		const F32 crntLum = s_avgLum[0] * (1.0 / F32(kInputTexSize.x * kInputTexSize.y));
#endif

#if 1
		const F32 prevLum = readExposureAndAverageLuminance().y;

		// Lerp between previous and new L value
		const F32 interpolationFactor = 0.05;
		F32 finalAvgLum = lerp(prevLum, crntLum, interpolationFactor);
#else
		F32 finalAvgLum = crntLum;
#endif

		// This is a workaround because sometimes the avg lum becomes nan
		finalAvgLum = clamp(finalAvgLum, kEpsilonF32, kMaxF32);

		writeExposureAndAverageLuminance(computeExposure(finalAvgLum, 0.0), finalAvgLum);
	}
}
#pragma anki end
