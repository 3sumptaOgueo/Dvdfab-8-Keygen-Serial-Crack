// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp
#include <AnKi/Shaders/Common.hlsl>

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kInDepthMapSize, 0u);
#define THREAD_COUNT_SQRT 8

[[vk::push_constant]] ConstantBuffer<Mat4> g_mvp;
[[vk::binding(0)]] StructuredBuffer<Vec4> g_flarePositions;
[[vk::binding(1)]] RWStructuredBuffer<DrawIndirectArgs> g_indirectInfo;
[[vk::binding(2)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(3)]] Texture2D g_depthMap;

groupshared U32 s_maxDepth;

[numthreads(THREAD_COUNT_SQRT, THREAD_COUNT_SQRT, 1)] void main(U32 svGroupIndex : SV_GROUPINDEX, UVec3 svGroupThreadId : SV_GROUPTHREADID,
																UVec3 svGroupId : SV_GROUPID)
{
	// Init the s_maxDepth
	if(svGroupIndex == 0u)
	{
		s_maxDepth = 0u;
	}

	GroupMemoryBarrierWithGroupSync();

	// Project the flare
	const U32 flareIdx = svGroupId.x;
	const Vec4 posClip = mul(g_mvp, g_flarePositions[flareIdx]);
	const Vec3 posNdc = posClip.xyz / posClip.w;
	const F32 depth = posNdc.z;

	// Compute the UVs to sample the depth map
	// Belongs to [-THREAD_COUNT_SQRT, THREAD_COUNT_SQRT]
	const Vec2 displacement = Vec2(svGroupThreadId.xy) - (THREAD_COUNT_SQRT / 2u);
	const Vec2 texelSize = 1.0 / Vec2(kInDepthMapSize);
	const Vec2 uv = ndcToUv(posNdc.xy) + displacement * texelSize;

	// Sample and store depth
	const F32 refDepth = g_depthMap.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	InterlockedMax(s_maxDepth, U32(refDepth * F32(kMaxU32)));

	// Sync
	GroupMemoryBarrierWithGroupSync();

	if(svGroupIndex == 0u)
	{
		const F32 refDepth2 = F32(s_maxDepth) / F32(kMaxU32);
		g_indirectInfo[flareIdx].m_vertexCount = (depth > refDepth2) ? 0u : 4u;

		g_indirectInfo[flareIdx].m_instanceCount = 1u;
		g_indirectInfo[flareIdx].m_firstVertex = 0u;
		g_indirectInfo[flareIdx].m_firstInstance = 0u;
	}
}
#pragma anki end comp
