// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kTileCount, 0u);
ANKI_SPECIALIZATION_CONSTANT_U32(kZSplitCount, 2u);

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] Texture2D g_depthTex;
[[vk::binding(2)]] SamplerState g_trilinearRepeatSampler;

[[vk::binding(3)]] ConstantBuffer<ClusteredShadingUniforms> g_clusteredShading;
[[vk::binding(4)]] StructuredBuffer<Decal> g_decals;
[[vk::binding(5)]] StructuredBuffer<Cluster> g_clusters;

ANKI_BINDLESS_SET(1)

struct FragOut
{
	RVec4 m_diffuse : SV_TARGET0;
	RVec4 m_roughnessAndOther : SV_TARGET1;
};

FragOut main([[vk::location(0)]] Vec2 uv : TEXCOORD, Vec4 svPosition : SV_POSITION)
{
	// This code blends the diffuse and the specular+rougness of the decals with GBuffer render targets.
	// Normaly the blending is being done ('D' is the decal diffuse and 'f' is decal blend factor):
	// d=gbuffer.diff
	// 1st decal: d'=d*(1-f)+D*f
	// 2nd decal: d''=d'*(1-f')+D'*f' <=> d''=d*(1-f)*(1-f')+D*f*(1-f')+D'*f'
	// By looking at the trend we will have to multiply the gbuffer.diff with: (1-f)*(1-f') ... (1-f'''')

	RVec4 diffuse = Vec4(0.0, 0.0, 0.0, 1.0);
	RVec4 roughnessAndOther = Vec4(0.0, 0.0, 0.0, 1.0);

	// Get worldPos
	const F32 depth = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_clusteredShading.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Get the cluster
	Cluster cluster = getClusterFragCoord(g_clusters, Vec3(svPosition.xy, depth), kTileCount, kZSplitCount, g_clusteredShading.m_zSplitMagic.x,
										  g_clusteredShading.m_zSplitMagic.y);

	// Make the decalsMask uniform across the wave because we are accessing bindless textures later on
	U32 decalsMask = cluster.m_decalsMask[0];
	for(U32 i = 1; i < kMaxVisibleDecals / 32; ++i)
	{
		decalsMask |= cluster.m_decalsMask[i];
	}

	if(WaveActiveAllTrue(decalsMask == 0))
	{
		discard;
	}

	U32 idx;
	[loop] while((idx = iterateDecals(cluster)) != kMaxU32)
	{
		const Decal decal = g_decals[idx];

		// Project pos to decal space
		const Vec4 texCoords4 = mul(decal.m_textureMatrix, Vec4(worldPos, 1.0));
		if(texCoords4.w <= 0.7)
		{
			// Behind the decal, skip
			continue;
		}

		const Vec2 uv = saturate(texCoords4.xy / texCoords4.w);

		// Read textures
		RVec4 diff;
		if(decal.m_diffuseTexture != kMaxU32)
		{
			diff = g_bindlessTextures2dF32[decal.m_diffuseTexture].Sample(g_trilinearRepeatSampler, uv);
		}
		else
		{
			diff = 0.0f;
		}

		RVec2 roughnessMetalness;
		RF32 roughnessMetalnessFactor;
		if(decal.m_roughnessMetalnessTexture != kMaxU32)
		{
			roughnessMetalness = g_bindlessTextures2dF32[decal.m_roughnessMetalnessTexture].Sample(g_trilinearRepeatSampler, uv).gb;
			roughnessMetalnessFactor = diff.a;
		}
		else
		{
			roughnessMetalness = 0.0f;
			roughnessMetalnessFactor = 0.0f;
		}

		// Update diffuse
		RF32 f = diff.a * decal.m_diffuseBlendFactor;
		diffuse.rgb = diffuse.rgb * (1.0 - f) + diff.rgb * f;
		diffuse.a *= (1.0 - f);

		// Update only roughness for now. Metalness is weirdly packed
		f = roughnessMetalnessFactor * decal.m_roughnessMetalnessFactor;
		roughnessAndOther.r = roughnessMetalness.r * (1.0 - f) + roughnessMetalness.r * f;
		roughnessAndOther.a *= (1.0 - f);
	}

	FragOut output;
	output.m_diffuse = diffuse;
	output.m_roughnessAndOther = roughnessAndOther;
	return output;
}
#pragma anki end
