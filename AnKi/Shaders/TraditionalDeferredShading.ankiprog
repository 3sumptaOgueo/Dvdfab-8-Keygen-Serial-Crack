// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// Classic deferred lighting shader

#pragma anki mutator SPECULAR 0 1

// VERT
#pragma anki start vert
#include <AnKi/Shaders/Common.hlsl>

Vec4 main(U32 svVertexId : SV_VERTEXID) : SV_POSITION
{
	const Vec2 uv = Vec2(svVertexId & 1, svVertexId >> 1) * 2.0;
	const Vec2 pos = uv * 2.0 - 1.0;
	return Vec4(pos, 0.0, 1.0);
}
#pragma anki end

// FRAG
#pragma anki start frag
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/LightFunctions.hlsl>
#include <AnKi/Shaders/Include/TraditionalDeferredShadingTypes.h>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>

[[vk::binding(0)]] ConstantBuffer<TraditionalDeferredShadingUniforms> g_unis;

[[vk::binding(1)]] StructuredBuffer<U32> g_visibleLightIds;
[[vk::binding(2)]] StructuredBuffer<GpuSceneLight> g_lights;

[[vk::binding(3)]] SamplerState g_gbufferSampler;
[[vk::binding(4)]] Texture2D<Vec4> g_gbufferTex0;
[[vk::binding(5)]] Texture2D<Vec4> g_gbufferTex1;
[[vk::binding(6)]] Texture2D<Vec4> g_gbufferTex2;
[[vk::binding(7)]] Texture2D<Vec4> g_depthTex;

// For directional light:
[[vk::binding(8)]] SamplerComparisonState g_shadowMapSampler;
[[vk::binding(9)]] Texture2D<RVec4> g_shadowMap;

RVec3 main(Vec4 svPosition : SV_POSITION) : SV_TARGET0
{
	// Compute UV coordinates
	const Vec2 uvToRead = mad(Vec2(svPosition.xy), g_unis.m_inputTexUvScale, g_unis.m_inputTexUvBias);
	const Vec2 uvToWrite = mad(Vec2(svPosition.xy), g_unis.m_fbUvScale, g_unis.m_fbUvBias);

	const F32 depth = g_depthTex.SampleLevel(g_gbufferSampler, uvToRead, 0.0).r;
	if(depth == 1.0f)
	{
		discard;
	}

	// Decode and process gbuffer
	GbufferInfo gbuffer = (GbufferInfo)0;
	unpackGBufferNoVelocity(g_gbufferTex0.SampleLevel(g_gbufferSampler, uvToRead, 0.0), g_gbufferTex1.SampleLevel(g_gbufferSampler, uvToRead, 0.0),
							g_gbufferTex2.SampleLevel(g_gbufferSampler, uvToRead, 0.0), gbuffer);
	gbuffer.m_subsurface = max(gbuffer.m_subsurface, kSubsurfaceMin * 8.0);

	const Vec4 worldPos4 = mul(g_unis.m_invViewProjMat, Vec4(uvToNdc(uvToWrite), depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Compute diff
	const Vec3 diffC = diffuseLobe(gbuffer.m_diffuse);

	Vec3 outColor = gbuffer.m_emission;
	const Vec3 viewDir = normalize(g_unis.m_cameraPos - worldPos);
	ANKI_MAYBE_UNUSED(viewDir);

	// Dir light
	if(g_unis.m_dirLight.m_active)
	{
		const F32 dist = length(g_unis.m_cameraPos - worldPos);
		RF32 shadowFactor;
		if(dist < g_unis.m_dirLight.m_effectiveShadowDistance)
		{
			// Acceptable distance

			shadowFactor = computeShadowFactorDirLight(g_unis.m_dirLight.m_lightMatrix, worldPos, g_shadowMap, g_shadowMapSampler);
		}
		else
		{
			shadowFactor = 1.0;
		}

		const Vec3 l = -g_unis.m_dirLight.m_direction;
		const RF32 lambert = dot(l, gbuffer.m_normal);
		const RF32 factor = shadowFactor * max(gbuffer.m_subsurface, lambert);

#if SPECULAR == 1
		const Vec3 specC = specularIsotropicLobe(gbuffer, viewDir, l);
#else
		const Vec3 specC = Vec3(0.0, 0.0, 0.0);
#endif
		outColor += (specC + diffC) * g_unis.m_dirLight.m_diffuseColor * factor;
	}

	// For all (other) lights
	const U32 lightCount = g_visibleLightIds[0];
	for(U32 i = 1; i <= lightCount; ++i)
	{
		const GpuSceneLight light = g_lights[g_visibleLightIds[i]];

		const Vec3 frag2Light = light.m_position - worldPos;
		const Vec3 l = normalize(frag2Light);
		const F32 nol = max(0.0, dot(gbuffer.m_normal, l));

		const F32 att = computeAttenuationFactor(light.m_radius, frag2Light);
		const F32 lambert = nol;
		const F32 spot = ((U32)light.m_flags & (U32)GpuSceneLightFlag::kSpotLight)
							 ? computeSpotFactor(l, light.m_outerCos, light.m_innerCos, light.m_direction)
							 : 1.0f;
		const F32 factor = att * spot * max(lambert, gbuffer.m_subsurface);

#if SPECULAR == 1
		const Vec3 specC = specularIsotropicLobe(gbuffer, viewDir, l);
#else
		const Vec3 specC = Vec3(0.0, 0.0, 0.0);
#endif

		outColor += (specC + diffC) * light.m_diffuseColor * factor;
	}

	return outColor;
}

#pragma anki end
