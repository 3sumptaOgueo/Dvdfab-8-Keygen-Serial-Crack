// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANKI_TECHNIQUE 2

#include <AnKi/Shaders/ForwardShadingCommon.hlsl>
#include <AnKi/Shaders/Functions.hlsl>

#pragma anki reflect AnKiLocalUniforms
#pragma anki struct AnKiLocalUniforms
#pragma anki member RVec3 m_fogColor
#pragma anki member RF32 m_fogAlphaScale
#pragma anki member RF32 m_fogDistanceOfMaxThikness
#pragma anki struct end

struct VertIn
{
	[[vk::location(0)]] UVec4 m_gpuSceneRenderable : RENDERABLE;
	U32 m_svVertexId : SV_VERTEXID;
};

struct VertOut
{
	Vec4 m_svPosition : SV_POSITION;
	F32 m_zVSpace : ZVSPACE;
	nointerpolation U32 m_uniformsOffset : UNIFORMS;
};

#pragma anki start vert

VertOut main(VertIn input)
{
	VertOut output;

	const GpuSceneRenderableVertex renderable = unpackGpuSceneRenderableVertex(input.m_gpuSceneRenderable);
	const GpuSceneMeshLod mesh = g_gpuScene.Load<GpuSceneMeshLod>(renderable.m_meshLodOffset);
	const Mat3x4 worldTransform = g_gpuScene.Load<Mat3x4>(renderable.m_worldTransformsOffset);
	const UnpackedMeshVertex vertex = loadVertex(mesh, input.m_svVertexId, false);

	const Vec3 worldPos = mul(worldTransform, Vec4(vertex.m_position, 1.0));
	output.m_svPosition = mul(g_globalUniforms.m_viewProjectionMatrix, Vec4(worldPos, 1.0));

	const Vec3 viewPos = mul(g_globalUniforms.m_viewTransform, Vec4(worldPos, 1.0));
	output.m_zVSpace = viewPos.z;

	output.m_uniformsOffset = renderable.m_uniformsOffset;

	return output;
}

#pragma anki end

#pragma anki start frag

FragOut main(VertOut input)
{
	FragOut output = (FragOut)0;
	const AnKiLocalUniforms localUniforms = loadAnKiLocalUniforms(g_gpuScene, input.m_uniformsOffset);

	fog(localUniforms.m_fogColor, localUniforms.m_fogAlphaScale, localUniforms.m_fogDistanceOfMaxThikness, input.m_svPosition, input.m_zVSpace,
		output);

	return output;
}
#pragma anki end
