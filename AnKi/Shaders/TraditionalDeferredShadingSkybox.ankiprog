// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator METHOD 0 1 // 0: solid colod, 1: 2D image

#pragma anki technique_start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki technique_end vert

#pragma anki technique_start frag

#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/Include/TraditionalDeferredShadingTypes.h>

[[vk::push_constant]] ConstantBuffer<TraditionalDeferredSkyboxConstants> g_consts;

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] Texture2D g_depthTex;

#if METHOD == 1
[[vk::binding(2)]] SamplerState g_trilinearAnySampler;
[[vk::binding(3)]] Texture2D<RVec4> g_envMapTex;
#endif

RVec3 main(Vec2 uv : TEXCOORD, Vec4 svPosition : SV_POSITION) : SV_TARGET0
{
	const Vec2 uvToRead = mad(svPosition.xy, g_consts.m_inputTexUvScale, g_consts.m_inputTexUvBias);

	const F32 depth = g_depthTex.SampleLevel(g_nearestAnyClampSampler, uvToRead, 0.0).r;
	if(depth != 1.0f)
	{
		discard;
	}

#if METHOD == 0
	ANKI_MAYBE_UNUSED(uv);
	return g_consts.m_solidColor;
#else
	const F32 depthFar = 1.0;
	const Vec2 ndc = uvToNdc(uv);
	const Vec4 worldPos4 = mul(g_consts.m_invertedViewProjectionMat, Vec4(ndc, depthFar, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	const Vec3 eyeToFrag = normalize(worldPos - g_consts.m_cameraPos);

	const Vec2 uv2 = equirectangularMapping(eyeToFrag);
	return g_envMapTex.Sample(g_trilinearAnySampler, uv2).rgb;
#endif
}

#pragma anki technique_end frag
