// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki technique_start comp

#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/BilateralFilter.hlsl>

[[vk::binding(0)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(1)]] Texture2D<Vec4> g_quarterShadowsTex;
[[vk::binding(2)]] RWTexture2D<Vec4> g_fullShadowUav;
[[vk::binding(3)]] Texture2D<Vec4> g_quarterDepthTex;
[[vk::binding(4)]] Texture2D<Vec4> g_fullDepthTex;

[numthreads(8, 8, 1)] void main(UVec2 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	Vec2 outUavSize;
	g_fullShadowUav.GetDimensions(outUavSize.x, outUavSize.y);

	if(any(Vec2(svDispatchThreadId) >= outUavSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(svDispatchThreadId) + 0.5) / outUavSize;

	// Reference
	const F32 depthCenter = g_fullDepthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x;

	// Do a bilateral upscale
	F32 sumShadowFactor = 0.0f;
	const Vec2 texelSize = 1.0 / (outUavSize / 2.0f);
	const I32 radius = 1;
	F32 sumWeight = kEpsilonF32;
	for(I32 x = -radius; x <= radius; ++x)
	{
		for(I32 y = -radius; y <= radius; ++y)
		{
			const Vec2 sampleUv = uv + Vec2(x, y) * texelSize;
			const F32 depthTap = g_quarterDepthTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;

			const F32 w = calculateBilateralWeightDepth(depthCenter, depthTap, 1.0);

			const F32 localShadowFactor = g_quarterShadowsTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;

			sumShadowFactor += localShadowFactor * w;

			sumWeight += w;
		}
	}

	sumShadowFactor /= sumWeight;

	g_fullShadowUav[svDispatchThreadId.xy] = sumShadowFactor;
}

#pragma anki technique_end comp
