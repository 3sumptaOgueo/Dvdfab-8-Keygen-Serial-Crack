// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANKI_TECHNIQUE 2
#pragma anki mutator ANIMATED_TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#include <AnKi/Shaders/ForwardShadingCommon.hlsl>

struct VertIn
{
	[[vk::location(0)]] GpuSceneRenderablePacked m_gpuSceneRenderable : RENDERABLE;
	U32 m_svVertexId : SV_VERTEXID;
};

struct VertOut
{
	nointerpolation U32 m_uniformsOffset : UNIS_OFFSET;
	nointerpolation RF32 m_alpha : ALPHA;
	Vec2 m_uv : TEXCOORD;
	Vec3 m_worldPos : WORLD_POS;
	Vec4 m_svPosition : SV_POSITION;
};

#pragma anki reflect AnKiLocalUniforms
#pragma anki struct AnKiLocalUniforms
#pragma anki member F32 m_animationPeriod if ANIMATED_TEXTURE is 1
#pragma anki member Vec4 m_colorScale
#pragma anki member Vec4 m_colorBias
#pragma anki member U32 m_diffuseMap
#pragma anki struct end

#pragma anki start vert

VertOut main(VertIn input)
{
	const U32 particleId = input.m_svVertexId / 6u;
	const U32 vertexId = input.m_svVertexId % 6u;

	const GpuSceneRenderable renderable = unpackGpuSceneRenderable(input.m_gpuSceneRenderable);
	const GpuSceneParticleEmitter particles = g_gpuScene.Load<GpuSceneParticleEmitter>(renderable.m_geometryOffset);

	U32 idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticlePosition] + particleId * sizeof(Vec3);
	const Vec3 vertPos = g_gpuScene.Load<Vec3>(idx);
	idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleScale] + particleId * sizeof(F32);
	const F32 vertScale = g_gpuScene.Load<F32>(idx);
	idx = particles.m_vertexOffsets[(U32)VertexStreamId::kParticleColor] + particleId * sizeof(F32);
	const F32 vertAlpha = g_gpuScene.Load<F32>(idx);

	VertOut output;

	output.m_uv = Vec2(vertexId & 1u, ((vertexId + 1u) / 3u) & 1u);

	output.m_worldPos =
		mul(g_globalUniforms.m_cameraTransform, Vec4((output.m_uv - 0.5) * vertScale, 0.0, 0.0)) + vertPos;

	output.m_svPosition = mul(g_globalUniforms.m_viewProjectionMatrix, Vec4(output.m_worldPos, 1.0));

	output.m_alpha = vertAlpha;
	output.m_uniformsOffset = renderable.m_uniformsOffset;

	return output;
}
#pragma anki end

#pragma anki start frag

FragOut main(VertOut input)
{
	FragOut output = (FragOut)0;
	const AnKiLocalUniforms localUniforms =
		loadAnKiLocalUniforms(g_gpuScene, WaveReadLaneFirst(input.m_uniformsOffset));

#if ANIMATED_TEXTURE == 1
	RVec4 texCol = readAnimatedTextureRgba(g_bindlessTextures2dArrayF32[localUniforms.m_diffuseMap], g_globalSampler,
										   localUniforms.m_animationPeriod, input.m_uv, g_clusteredShading.m_time);
#else
	RVec4 texCol = g_bindlessTextures2dF32[localUniforms.m_diffuseMap].Sample(g_globalSampler, input.m_uv);
#endif

#if LIGHT
	texCol.rgb = computeLightColorLow(texCol.rgb, input.m_worldPos, input.m_svPosition);
#endif

	RVec4 colScale = localUniforms.m_colorScale;
	colScale.a *= input.m_alpha;
	particleAlpha(texCol, colScale, localUniforms.m_colorBias, output);

	return output;
}
#pragma anki end
