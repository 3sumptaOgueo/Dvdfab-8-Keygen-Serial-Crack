// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator RAYS_PER_PIXEL 1 2 4 8
#pragma anki library RtShadows
#pragma anki ray_type 0

#pragma anki start rgen

#include <AnKi/Shaders/ImportanceSampling.hlsl>
#include <AnKi/Shaders/PackFunctions.hlsl>
#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/MaterialShadersCommon.hlsl>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>

#define SET 2u

[[vk::binding(0, SET)]] ConstantBuffer<ClusteredShadingUniforms> g_clusteredShading;
[[vk::binding(1, SET)]] StructuredBuffer<PointLight> g_pointLights;
[[vk::binding(1, SET)]] StructuredBuffer<SpotLight> g_spotLights;
[[vk::binding(2, SET)]] StructuredBuffer<Cluster> g_clusters;
[[vk::binding(3, SET)]] SamplerState g_trilinearRepeatSampler;
[[vk::binding(4, SET)]] RWTexture2D<UVec4> g_shadowsImage;
[[vk::binding(5, SET)]] Texture2D<UVec4> g_historyShadowsTex;
[[vk::binding(6, SET)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(7, SET)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(8, SET)]] Texture2D<Vec4> g_depthRt;
[[vk::binding(9, SET)]] Texture2D<Vec4> g_motionVectorsRt;
[[vk::binding(10, SET)]] Texture2D<Vec4> g_historyLengthTex;
[[vk::binding(11, SET)]] Texture2D<Vec4> g_normalRt;
[[vk::binding(12, SET)]] RaytracingAccelerationStructure g_tlas;
[[vk::binding(13, SET)]] Texture2D<Vec4> g_prevMomentsTex;
[[vk::binding(14, SET)]] RWTexture2D<Vec4> g_momentsImage;
[[vk::binding(15, SET)]] Texture2D<Vec4> g_blueNoiseTex;

[[vk::push_constant]] ConstantBuffer<RtShadowsUniforms> g_unis;

F32 trace(const Vec3 rayOrigin, const Vec3 rayDir, F32 tMax)
{
	const U32 flags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;
	const U32 cullMask = 0xFFu;
	const U32 sbtRecordOffset = 0u;
	const U32 sbtRecordStride = 0u;
	const U32 missIndex = 0u;
	RayDesc ray;
	ray.Origin = rayOrigin;
	ray.TMin = 0.1;
	ray.Direction = rayDir;
	ray.TMax = tMax;

	RayPayload payload;
	payload.m_shadowFactor = 0.0;
	TraceRay(g_tlas, flags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, ray, payload);

	return payload.m_shadowFactor;
}

[shader("raygeneration")] void main()
{
	// World position
	const Vec2 uv = (Vec2(DispatchRaysIndex().xy) + 0.5) / Vec2(DispatchRaysDimensions().xy);
	const Vec2 ndc = uvToNdc(uv);
	const F32 depth = g_depthRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).r;
	const Vec4 worldPos4 = mul(g_clusteredShading.m_matrices.m_invertedViewProjectionJitter, Vec4(ndc, depth, 1.0));
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	if(depth == 1.0)
	{
		g_shadowsImage[DispatchRaysIndex().xy] = UVec4(0, 0, 0, 0);
		g_momentsImage[DispatchRaysIndex().xy] = Vec4(0.0, 0.0, 0.0, 0.0);
		return;
	}

	// World normal
	const Vec3 normal = unpackNormalFromGBuffer(g_normalRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0));

	// Cluster
	Cluster cluster = getClusterFragCoord(g_clusters, g_clusteredShading, Vec3(uv * g_clusteredShading.m_renderingSize, depth));

	RF32 shadowFactors[kMaxRtShadowLayers];
	zeroRtShadowLayers(shadowFactors);

	// Get a random factor
	Vec3 random[RAYS_PER_PIXEL];
	for(I32 i = 0; i < RAYS_PER_PIXEL; ++i)
	{
		const U32 frameIdx = g_clusteredShading.m_frame * U32(RAYS_PER_PIXEL + i);
#if 0
		const UVec3 irandom = rand3DPCG16(UVec3(DispatchRaysIndex().xy, frameIdx));
		random[i] = Vec3(irandom) / F32(0xFFFF) * 2.0 - 1.0; // In [-1.0, 1.0]
#else
		random[i] = g_blueNoiseTex.SampleLevel(g_trilinearRepeatSampler, Vec2(DispatchRaysDimensions().xy) / Vec2(64.0, 64.0) * uv, 0.0).rgb;
		random[i] = animateBlueNoise(random[i], frameIdx);
		random[i] = random[i] * 2.0 - 1.0; // In [-1.0, 1.0]
#endif
	}

	// Dir light
	const DirectionalLight dirLight = g_clusteredShading.m_directionalLight;
	[branch] if(dirLight.m_active != 0u && dirLight.m_shadowCascadeCount > 0u)
	{
		for(I32 i = 0; i < RAYS_PER_PIXEL; ++i)
		{
			const Vec3 dirLightPos = worldPos + -dirLight.m_direction * 10.0 + random[i];
			const Vec3 rayDir = normalize(dirLightPos - worldPos);

			const F32 lambertTerm = dot(rayDir, normal);
			[branch] if(lambertTerm > 0.0)
			{
				shadowFactors[dirLight.m_shadowLayer] += trace(worldPos, rayDir, 10000.0) / F32(RAYS_PER_PIXEL);
			}
		}
	}

	// Point lights
	[loop] while(cluster.m_pointLightsMask != ExtendedClusterObjectMask(0))
	{
		const I32 idx = firstbitlow2(cluster.m_pointLightsMask);
		cluster.m_pointLightsMask &= ~(ExtendedClusterObjectMask(1) << ExtendedClusterObjectMask(idx));
		const PointLight light = g_pointLights[idx];

		[branch] if(light.m_shadowAtlasTileScale >= 0.0)
		{
			for(I32 i = 0; i < RAYS_PER_PIXEL; ++i)
			{
				const Vec3 lightPos = light.m_position + 0.05 * light.m_radius * random[i];
				const Vec3 toLight = lightPos - worldPos;
				const F32 distanceToLight = length(toLight);
				const Vec3 rayDir = toLight / distanceToLight; // normalize

				const Bool inside = distanceToLight < light.m_radius;
				const F32 lambertTerm = dot(rayDir, normal);
				[branch] if(inside && lambertTerm > 0.0)
				{
					shadowFactors[light.m_shadowLayer] += trace(worldPos, rayDir, distanceToLight) / F32(RAYS_PER_PIXEL);
				}
			}
		}
	}

	// Spot lights
	[loop] while(cluster.m_spotLightsMask != ExtendedClusterObjectMask(0))
	{
		const I32 idx = firstbitlow2(cluster.m_spotLightsMask);
		cluster.m_spotLightsMask &= ~(ExtendedClusterObjectMask(1) << ExtendedClusterObjectMask(idx));
		const SpotLight light = g_spotLights[idx];

		[branch] if(light.m_shadowLayer != kMaxU32)
		{
			for(I32 i = 0; i < RAYS_PER_PIXEL; ++i)
			{
				const Vec3 lightPos = light.m_position + 0.05 * light.m_radius * random[i];
				const Vec3 toLight = lightPos - worldPos;
				const F32 distanceToLight = length(toLight);
				const Vec3 rayDir = toLight / distanceToLight; // normalize

				const F32 lambertTerm = dot(rayDir, normal);
				[branch] if(lambertTerm > 0.0)
				{
					shadowFactors[light.m_shadowLayer] += trace(worldPos, rayDir, distanceToLight) / F32(RAYS_PER_PIXEL);
				}
			}
		}
	}

	// Get history length
	const Vec2 historyUv = uv + g_motionVectorsRt.SampleLevel(g_linearAnyClampSampler, uv, 0.0).xy;
	const F32 historyLength = g_historyLengthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x;

	// Compute blend fractor. Use nearest sampler because it's an integer texture
	const F32 lowestBlendFactor = 0.1;
	const F32 stableFrames = 4.0;
	const F32 lerpv = min(1.0, (historyLength * kRtShadowsMaxHistoryLength - 1.0) / stableFrames);
	const F32 blendFactor = lerp(1.0, lowestBlendFactor, lerpv);

	// Blend with history
	const UVec4 packedhistory = g_historyShadowsTex.SampleLevel(g_nearestAnyClampSampler, historyUv, 0.0);
	RF32 history[kMaxRtShadowLayers];
	unpackRtShadows(packedhistory, history);
	for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
	{
		const F32 lerpv = min(1.0, g_unis.historyRejectFactor[i] + blendFactor);
		shadowFactors[i] = lerp(history[i], shadowFactors[i], lerpv);
	}

	// Store the shadows image
	const UVec4 packed = packRtShadows(shadowFactors);
	g_shadowsImage[DispatchRaysIndex().xy] = packed;

	// Compute the moments that will give temporal variance
	Vec2 moments = 0.0;
	[unroll] for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
	{
		moments.x += shadowFactors[i];
	}
	moments.y = moments.x * moments.x;

	// Blend the moments
	const Vec2 prevMoments = g_prevMomentsTex.SampleLevel(g_linearAnyClampSampler, historyUv, 0.0).xy;
	const F32 lowestMomentsBlendFactor = 0.2;
	const F32 momentsBlendFactor = lerp(1.0, lowestMomentsBlendFactor, lerpv);
	moments = lerp(prevMoments, moments, momentsBlendFactor);

	// Store the moments
	g_momentsImage[DispatchRaysIndex().xy] = Vec4(moments, 0.0, 0.0);
}
#pragma anki end
